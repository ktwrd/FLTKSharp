using System.Drawing;
using FLTKSharp.Core.Interfaces;
using NLog;
using static FLTKSharp.Core.CFltkNative;
<!-- codegen:using -->

namespace FLTKSharp.Core;
#nullable enable
public partial class %name% <!-- codegen:extends -->
{
    public static IFltkWidget FromPointer(IntPtr pointer) => new %name%(pointer);
    public IntPtr GetPointer() => Pointer;
    private readonly Logger _log = LogManager.GetCurrentClassLogger();
    
    protected override void Disposing(bool disposed)
    {
        base.Disposing(disposed);
        var current = %prefix%_current();
        if (current == Pointer)
            %prefix%_end(Pointer);
        %prefix%_clear(Pointer);
    }
    
    public %name%(int x, int y, int width, int height, string? label = null)
        : this(Create(x, y, width, height, label, out var disposeAction))
    {
        _disposeActions.Add(disposeAction);
    }
    internal %name%(IntPtr pointer)
        : base(pointer)
    {
        _log.Properties["Pointer"] = pointer;
        _log.Trace($"Created " + pointer.ToString("x2"));
        base.FlObjectHandle = %prefix%_handle;
    }
    protected override FltkObjectHandleMethod FlObjectHandle
    {
        get => base.FlObjectHandle;
        set => base.FlObjectHandle = value;
    }
    
    private static IntPtr Create(int x, int y, int width, int height, string? label, out Action disposeAction)
    {
        var labelPointer = InternalHelper.AllocateStringD(label, out disposeAction);
        return %prefix%_new(x, y, width, height, labelPointer);
    }

<!-- codegen:body -->
}
#nullable disable